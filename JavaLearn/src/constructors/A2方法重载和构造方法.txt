Overload---方法重载
1.概念  一个类中的一组方法  相同的方法名字，不同的参数列表  这样的一组方法构成了方法重载
        参数列表的不同体现在？ 参数的个数，参数的类型，参数的顺序
2.作用  为了让使用着便于记忆与调用  只需要记住一个名字，执行不同的操作
3.可以自己设计方法
    调用方法的时候 首先通过方法名定位方法；
    如果方法名一致，可以通过参数的数据类型定位方法；
    如果没有与传递参数一致的方法，可以找一个参数类型可以进行转换（自动）   ——能自动转换的可以，不能自动转换的不行；
4.JDK1.5以后新写法
    test(int...x)   动态参数列表  类型是固定的int，传递参数的个数是0-N ,可以是0个
                    本质上是一个数组， 有length属性，有index属性
    动态参数列表的方法  不能与 有相同意义的数据类型的方法构成方法重载，因为本质上是一样的；
    动态参数列表的方法  可以不传参数 相当于是0个； 数组的方法 必须传递参数，不能是0个；
    动态参数列表的方法的参数中只能存在一份儿，，且必须放置在方法参数的末尾。


构造方法——

构造方法---做事情
1.作用：只有一个 构建（构造）当前类的对象；
2.写法： 权限修饰符 与类名一致的方法名(参数列表){
			一件事情 创建一个对象（当前类的Person）;
			返回对象；
			}
	注意：没有写返回值，但是有返回对象，有返回值。
3.用法： 通过new 关键字调用
4.特点：
    1.每一个类都有自己的构造方法 如果自己在类中没有定义，系统会默认提供一个无参数的构造方法；
      若在类中，自己定义了构造方法，则默认的无参数的构造方法即被覆盖；
    2.构造方法是否存在方法重载？ ---存在构造方法重载
5.每一个类都有构造方法
    若不定义，系统会默认提供无参数的构造方法。
    为什么要定义构造方法？ 什么时候需要设计构造方法？
    在创建对象的同时 想要一并做一些事情，默认提供的构造方法是不会做的。（默认无法满足，需要自己定义构造方法）
    这个时候我们可以自己定义构造方法（无参数的构造方法内做事，也可以定义带参数的）


类的第四个成员---程序块(代码块)
1.作用：跟普通方法一样 做事情的；
2.写法： 可以认为程序块是一个
        没有修饰符 没有参数 没有返回值  没有名字的特殊方法{
        }
3.用法：块也需要调用才能执行，我们自己调用不到（没有名字）
       每一次我们调用构造方法之前，系统会帮我们自动的调用一次程序块；
4.特点：没有什么重载的概念（因为压根没有名字，没有参数）
       代码块可以写多个,按照编写的顺序执行；
5.使用场景：块里面可以写一些程序，我想要在创建对象之前执行；

----------------------------------------------------------
this关键字
      public Person(String name,int age,String sex){
            this.name=name;//如果属性与变量重名，this
            this.age=age;
            this.sex=sex;
            System.out.println("调用的是有参数构造方法");
        }

    构造方法中 属性与变量名重名，必须需要一个代替词，代替对象
    1.this 是一个关键词（指代词），代替的是某一个对象（当前调用属性或方法时的那个对象）
    2.this既然代替的是一个对象：
        this可以调用什么？ 方法，属性 均可以；
        this可以调用构造方法吗？ 可以，在一个构造方法内可以调用另一个构造方法
            通过this(),省略了构造方法的名字（因为必须与类名一致）
            必须在另一个构造方法中调用 ，必须放在程序的第一行

        构造方法 一般方法 有顺序的，认为构造方法早于一般方法
        在一般方法中调用构造方法可以吗？ ——不行；
        构造方法可以重载，构造方法 调用另一个构造方法呢？
     3.this调用的过程可以放置在哪个位置写？
        调用属性或者方法 这一行代码，可以放置在类中的任何成员位置，上线顺序随意

一个类的描述：
 类的内部成员包含：
 	2.属性-------静态描述类的特征（变量，存值）
 	    权限修饰符 [特征修饰符] 属性类型 属性名字 [=值];
 	1.方法-------动态的描述类的行为（做事情）
 	    权限修饰符 [特征修饰符] 方法名字([参数列表])[跑出异常]{方法体}
 	    最主要是方法的设计的参数和返回值问题， 传递，调用，执行，内存
 	3.构造方法----用来创建当前类的对象（方法 很特殊）
 	    权限修饰符 与类名相同的名字([参数列表])[抛出异常]{方法体};
 	4.程序块（代码块）---理解是非常特殊的方法  无参数，无方法名，无返回值
 	    {方法体};
 	5.this关键词的使用
 	    用例代替某一个对象
 	    可以调用一般属性或方法，放置在任何位置都可以
 	    可以调用构造方法，只能放在另一个构造方法的方法内，且只能放在程序的第一行。

Scanner知识点补充：
    1.导包 java.util
    2.创建对象  Scanner input = new Scanner(System.in);
    3.做事情   int value =input.nextInt();
              String value=input.nextLine();
    nextInt(nextFloat(),nextDouble) next,nextLine
    1.读取方式上来讲 大家都是以回车符作为结束符号
            nextLine方法是是读取回车符号的，其他的方法都是不读取回车符的；
    2.读取的返回结果来讲 nextInt--->int  nextFloat -->float
                      next--String    nextLine--->String
                      next方法看到回车或者空格 都认为是结束，输入：abc edf  结果是:abc
                      nextLine只认为回车符结束；输入：abc edf 结果是：abc edf
    3.利用包装类做String 与基本类型的转化问题
        int value = Integer.parseInt("123");//如果字符串不是一个整数形式，就好产生
       float value=Float.parseFloat("123.11");

异常整理：
    InputMisMatchException
    ArrayIndexOutOfBoundsException
    NegativeArraySizeException
    NullPointerException
    NumberFormatException

    StackOverflowError