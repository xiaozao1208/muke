关于提升编码的能力
1.思考
2.注释-翻译
3.代码优化

数组day01
基础知识点：
数据类型 常量变量 运算符号  语法结构
		分支结构  循环结构
		if switch  for while  do..while
		循环嵌套关系  break continue

数组（容器）
    数组是一组数据类型相同的数据的组合，将这些数据 统一的管理起来；
    数组是一个引用数据类型，数组内存储的类型可以是基本类型，也可以是引用类型；

1.数组的定义（声明）
    数组类型[] 数组名字;
    int[] x;
    String[] y;
    char[] z;
    booleab[] m;
2.数组的初始化
    静态初始化  有长度，有元素
        int[] array = new int[]{10,20,30,40,50};
        int value= array[0]; //索引从0开始；从0开始--数组（长度-1）结束
        int value2=array[5];
        ArrayIndexoutofBoundsException 数组索引越界异常
    动态初始化  有长度，没有元素（不是真没有，是元素有默认值）
        int[] array2 = new int[5];
        整数默认值 --0;
        浮点数默认值 --0.0
        字符型默认值 --0---char( a 97, A 65  0 48)
        boolean默认值 --false

3.数组元素的访问
    通过元素在数组中的位置来访问
    位置--->index 索引
    索引是有取值范围的 [0, 数组长度-1]
    如果数组的索引超出了上述范围，会出现一个运行时异常，
    ArrayIndexoutofBoundsException 数组索引越界异常
4.数组元素的遍历（轮询）
    通过循环的方式访问数组的每一个元素  for（;;）{}
    正常的for循环  和 增加的for循环
    4.1 正常的for循环
        有三个必要的条件 index索引，找到某一个元素的位置；
        可以通过index直接访问数组的某一个位置——存值和取值都可以；
        不好在于写法想对来说比较麻烦
    4.2 增强版的for循环
        有两个条件   用来取值的变量  用来遍历的数值  没有index索引
        好处是写法想对比较容易
        不好只能取值，不能存值
        没有index索引，找不到元素到底是哪一个；
*5.基本数据类型和引用数据类型 在内存结构上的区别
    所有的变量空间都存储在栈内存
    变量空间可以存储基本数据类型，也可以存储 引用数据类型；
    如果变量空间存储的是基本数据类型， 存储的是值，一个变量改变，另一个不会跟着改变
    如果变量空间存储的是引用数据了下， 存储的是引用（地址），一个变量地址对应的值改变，另一个跟着改变；

6.新建一个数组 输出1-100以内的偶数
    6.1创建一个数组
        元素个数比较少，静态
        袁术个数很多有规律 动态 元素很多没有规律
    6.2用了两个循环  一个只为了存值，另一个只是为了输出查看
        存放时直接看结果可能由于存放误操作---看时正确，之后就发生变化
        存放不一定必须要查看，存放是一件事，查看是另一件事。 循环建议分开来写。

7.task
0.创建一个数组用例存储1-100之间的奇数；
*1.给定两个数组a{1,2,3,4} b{5,6,7,8} 将两个数组内得到元素对应位置互换
2.给定一个数组a{1,2,3,4,5,6} 将这个数组中的元素头尾对应互换位置
3.给定一个数组a{1,2,3,4,5,6}，计算数组所有元素的平均值；
*4.给定一个数组a{1,3,5,7,9,0,2,4,6,8}，找下数组中的最大值和最小值；（极值问题）
5.给定两个数组a{1,2,3},b{5,4} ,合并两个数组；
6.给定一个数组a{1,2,3,9,4,5},按照数组中的最大值位置，将数组拆分成两个{1,2,3}，和{4,5}
*7.给定一个数组a{1,2,3,0,0,4,5,0,6,0,7},去掉数组中的0元素；(创建一个新的数值，短的，0去掉)
8.创建一个数组 存储2-100之间的素数；
*9.数组元素的排序（冒泡，快速，选择，希尔...）
*10.用户的登录认证（用数组当做小数据库，存值，用户验证；）

数组day02
数组
练习题的讲解
8,9,10是重点重点，后期还要多多练习和吃透；

数组day03
多维数组 ——二维数组，三维数组 ...

    数组——用来存储一组相同数据类型的数据的容器；
        数组本身是一个引用数据类型[]
        数组内部存储的元素——基本数据类型 和 引用数据类型均可；

二维数组
    1.数组的定义和申明
        int[][] array; --数组里面的元素还是个数组
    2.数组的初始化
        静态初始化 ——有长度，有元素
            int[][] array = new int[][]{{1,2,5},{3,4}};
            int[][] array2={{2,4},{1,3,5}};
        动态初始化 ——有长度，没有元素（默认值）
            int[][] array =new int[4][2];
                表示 有4个小数组，每个小数组有3个元素；{x,x,x},{x,x,x}
    3.数组元素的访问
        通过元素在数组中的位置——index索引
        array[i][j]
            --i 控制大数组中，小数组的位置；
            --j 控制小数组中  元素的位置。
    4.数组元素的遍历/轮询
        正常 增强for循环  嵌套完成；

    5.引用类型在内存中的存储结构
        array[3][2]
            3表示 有3个小数组
            2表示 每个小数组中有2个元素；
三维数组
    创建一个数组，数组内存储的是二维数组，二位数组里面放置一维数组；
        int[][][] array = new int[3][2][1];
            -3 三个二维数组
            -2 两个一维数组
            -1 一维数组中有1个元素
        运行时异常  NullPointerException 空指针异常

常见的运行时异常（编译可以，运行报错）：
    1.InputMisMatchException 输入类型不匹配
        input.nextInt();
    2.ArrayIndexOutOfBoundsException 数组索引越界
        静态初始化  int[] array = {10,20};
        array[2]; --越界了
    3.NagativeArrayException  数组长度不合法【长度出现负数】
        动态初始化 int[] array = new Int[-2];
    4.NullPointerException 空指针异常
        引用为null,还拿来使用就不行啦
        int[] arrry = null;
        array[0];//空元素再拿来用，异常报错；//最容易找到异常，同时比较难定位；